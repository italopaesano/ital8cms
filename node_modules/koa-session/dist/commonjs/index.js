"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SessionOptions = void 0;
exports.createSession = createSession;
const node_assert_1 = __importDefault(require("node:assert"));
const node_util_1 = require("node:util");
const node_crypto_1 = require("node:crypto");
const is_type_of_1 = require("is-type-of");
const zod_1 = __importDefault(require("zod"));
const context_js_1 = require("./context.js");
const util_js_1 = __importDefault(require("./util.js"));
const debug = (0, node_util_1.debuglog)('koa-session');
const GET_CONTEXT_SESSION = Symbol('get contextSession');
const CONTEXT_SESSION_INSTANCE = Symbol('contextSession instance');
exports.SessionOptions = zod_1.default.object({
    /**
     * cookie key
     * Default is `koa.sess`
     */
    key: zod_1.default.string().default('koa.sess'),
    /**
     * maxAge in ms
     * Default is `86400000`, one day
     * If set to 'session' will result in a cookie that expires when session/browser is closed
     *
     * Warning: If a session cookie is stolen, this cookie will never expire
     */
    maxAge: zod_1.default.union([zod_1.default.number(), zod_1.default.literal('session')]).optional(),
    /**
     * automatically commit headers
     * Default is `true`
     */
    autoCommit: zod_1.default.boolean().default(true),
    /**
     * cookie value can overwrite or not
     * Default is `true`
     */
    overwrite: zod_1.default.boolean().default(true),
    /**
     * httpOnly or not
     * Default is `true`
     */
    httpOnly: zod_1.default.boolean().default(true),
    /**
     * signed or not
     * Default is `true`
     */
    signed: zod_1.default.boolean().default(true),
    /**
     * Force a session identifier cookie to be set on every response.
     * The expiration is reset to the original `maxAge`, resetting the expiration countdown.
     * Default is `false`
     */
    rolling: zod_1.default.boolean().default(false),
    /**
     * renew session when session is nearly expired, so we can always keep user logged in.
     * Default is `false`
     */
    renew: zod_1.default.boolean().default(false),
    /**
     * secure cookie
     * Default is `undefined`, will be set to `true` if the connection is over HTTPS, otherwise `false`.
     */
    secure: zod_1.default.boolean().optional(),
    /**
     * session cookie sameSite options
     * Default is `undefined`, meaning don't set it
     */
    sameSite: zod_1.default.string().optional(),
    /**
     * External key is used the cookie by default,
     * but you can use `options.externalKey` to customize your own external key methods.
     */
    externalKey: zod_1.default.object({
        /**
         * get the external key
         * `(ctx) => string`
         */
        get: zod_1.default.function()
            .args(zod_1.default.any())
            .returns(zod_1.default.string()),
        /**
         * set the external key
         * `(ctx, key) => void`
         */
        set: zod_1.default.function()
            .args(zod_1.default.any(), zod_1.default.string())
            .returns(zod_1.default.void()),
    }).optional(),
    /**
     * session storage is dependent on your external store
     */
    store: zod_1.default.object({
        /**
         * get session data by key
         * `(key, maxAge, { rolling, ctx }) => sessionData | Promise<sessionData>`
         */
        get: zod_1.default.function()
            .args(zod_1.default.string(), zod_1.default.number(), zod_1.default.object({ rolling: zod_1.default.boolean(), ctx: zod_1.default.any() }))
            .returns(zod_1.default.promise(zod_1.default.any())),
        /**
         * set session data for key, with a `maxAge` (in ms)
         * `(key, sess, maxAge, { rolling, changed, ctx }) => void | Promise<void>`
         */
        set: zod_1.default.function()
            .args(zod_1.default.string(), zod_1.default.any(), zod_1.default.number(), zod_1.default.object({ rolling: zod_1.default.boolean(), changed: zod_1.default.boolean(), ctx: zod_1.default.any() }))
            .returns(zod_1.default.promise(zod_1.default.void())),
        /**
         * destroy session data for key
         * `(key, { ctx })=> void | Promise<void>`
         */
        destroy: zod_1.default.function()
            .args(zod_1.default.string(), zod_1.default.object({ ctx: zod_1.default.any() }))
            .returns(zod_1.default.promise(zod_1.default.void())),
    }).optional(),
    /**
     * If your session store requires data or utilities from context, `opts.ContextStore` is also supported.
     * `ContextStore` must be a class which claims three instance methods demonstrated above.
     * `new ContextStore(ctx)` will be executed on every request.
     */
    ContextStore: zod_1.default.any().optional(),
    encode: zod_1.default.function()
        .args(zod_1.default.any())
        .returns(zod_1.default.string())
        .optional()
        .default(() => util_js_1.default.encode),
    decode: zod_1.default.function()
        .args(zod_1.default.string())
        .returns(zod_1.default.any())
        .default(() => util_js_1.default.decode),
    /**
     * If you want to generate a new session id, you can use `genid` option to customize it.
     * Default is a function that uses `randomUUID()`.
     * `(ctx) => string`
     */
    genid: zod_1.default.function()
        .args(zod_1.default.any())
        .returns(zod_1.default.string())
        .optional(),
    /**
     * If you want to prefix the session id, you can use `prefix` option to customize it.
     * It will not work if `options.genid(ctx)` present.
     */
    prefix: zod_1.default.string().optional(),
    /**
     * valid session value before use it
     * `(ctx, sessionData) => boolean`
     */
    valid: zod_1.default.function()
        .args(zod_1.default.any(), zod_1.default.any())
        .returns(zod_1.default.any())
        .optional(),
    /**
     * hook before save session
     * `(ctx, sessionModel) => void`
     */
    beforeSave: zod_1.default.function()
        .args(zod_1.default.any(), zod_1.default.any())
        .returns(zod_1.default.void())
        .optional(),
});
const DEFAULT_SESSION_OPTIONS = exports.SessionOptions.parse({});
function createSession(opts, app) {
    // session(app[, opts])
    if (opts && 'use' in opts && typeof opts.use === 'function') {
        [app, opts] = [opts, app];
    }
    // app required
    if (typeof app?.use !== 'function') {
        throw new TypeError('app instance required: `session(opts, app)`');
    }
    const options = opts ?? {};
    // back-compat maxage
    if (!('maxAge' in options) && 'maxage' in options) {
        Reflect.set(options, 'maxAge', Reflect.get(options, 'maxage'));
        if (process.env.NODE_ENV !== 'production') {
            console.warn('[koa-session] DeprecationWarning: `maxage` option has been renamed to `maxAge`');
        }
    }
    // keep backwards compatibility: make sure options instance is not mutated
    Object.assign(options, {
        ...DEFAULT_SESSION_OPTIONS,
        ...options,
    });
    exports.SessionOptions.parse(options);
    formatOptions(options);
    extendContext(app.context, options);
    return async function session(ctx, next) {
        const sess = ctx[GET_CONTEXT_SESSION];
        if (sess.store) {
            await sess.initFromExternal();
        }
        try {
            await next();
        }
        catch (err) {
            throw err;
        }
        finally {
            if (options.autoCommit) {
                await sess.commit();
            }
        }
    };
}
// Usage: `import session from 'koa-session'`
exports.default = createSession;
/**
 * format and check session options
 */
function formatOptions(opts) {
    // defaults
    if (opts.overwrite == null)
        opts.overwrite = true;
    if (opts.httpOnly == null)
        opts.httpOnly = true;
    // delete null sameSite config
    if (opts.sameSite == null)
        delete opts.sameSite;
    if (opts.signed == null)
        opts.signed = true;
    if (opts.autoCommit == null)
        opts.autoCommit = true;
    debug('session options %j', opts);
    const store = opts.store;
    if (store) {
        (0, node_assert_1.default)(typeof store.get === 'function', 'store.get must be function');
        (0, node_assert_1.default)(typeof store.set === 'function', 'store.set must be function');
        (0, node_assert_1.default)(typeof store.destroy === 'function', 'store.destroy must be function');
    }
    const externalKey = opts.externalKey;
    if (externalKey) {
        (0, node_assert_1.default)(typeof externalKey.get === 'function', 'externalKey.get must be function');
        (0, node_assert_1.default)(typeof externalKey.set === 'function', 'externalKey.set must be function');
    }
    const ContextStore = opts.ContextStore;
    if (ContextStore) {
        (0, node_assert_1.default)((0, is_type_of_1.isClass)(ContextStore), 'ContextStore must be a class');
        (0, node_assert_1.default)(typeof ContextStore.prototype.get === 'function', 'ContextStore.prototype.get must be function');
        (0, node_assert_1.default)(typeof ContextStore.prototype.set === 'function', 'ContextStore.prototype.set must be function');
        (0, node_assert_1.default)(typeof ContextStore.prototype.destroy === 'function', 'ContextStore.prototype.destroy must be function');
    }
    if (!opts.genid) {
        if (opts.prefix) {
            opts.genid = () => `${opts.prefix}${(0, node_crypto_1.randomUUID)()}`;
        }
        else {
            opts.genid = () => (0, node_crypto_1.randomUUID)();
        }
    }
}
/**
 * extend context prototype, add session properties
 *
 * @param  {Object} context koa's context prototype
 * @param  {Object} opts session options
 */
function extendContext(context, opts) {
    if (context.hasOwnProperty(GET_CONTEXT_SESSION)) {
        return;
    }
    Object.defineProperties(context, {
        [GET_CONTEXT_SESSION]: {
            get() {
                if (this[CONTEXT_SESSION_INSTANCE]) {
                    return this[CONTEXT_SESSION_INSTANCE];
                }
                this[CONTEXT_SESSION_INSTANCE] = new context_js_1.ContextSession(this, opts);
                return this[CONTEXT_SESSION_INSTANCE];
            },
        },
        session: {
            get() {
                return this[GET_CONTEXT_SESSION].get();
            },
            set(val) {
                this[GET_CONTEXT_SESSION].set(val);
            },
            configurable: true,
        },
        sessionOptions: {
            get() {
                return this[GET_CONTEXT_SESSION].opts;
            },
        },
    });
}
//# sourceMappingURL=data:application/json;base64,